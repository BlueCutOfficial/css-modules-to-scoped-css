diff --git a/dist/cjs/ember-classic-support.cjs b/dist/cjs/ember-classic-support.cjs
index ad000f792f799227e0d168ad48b423a14da7a9a4..47cc41d0dfa0ea272fd97de58417044b8b92f77d 100644
--- a/dist/cjs/ember-classic-support.cjs
+++ b/dist/cjs/ember-classic-support.cjs
@@ -465,13 +465,21 @@ var ScopedCssPreprocessor = class {
       appCss,
       mergedOtherTrees,
       componentStyles
-    ]);
+    ], { overwrite: true });
     let newOutput = new import_broccoli_concat.default(mergedStyles, {
       outputFile: options.outputPaths["app"],
       allowNone: true,
       sourceMapConfig: { enabled: true }
     });
-    return newOutput;
+    if (this.userOptions?.passthrough) {
+      let passedThrough = new import_broccoli_funnel.Funnel(mergedStyles, {
+        include: this.userOptions.passthrough,
+        destDir: this.userOptions.passthroughDestination
+      });
+      return new import_broccoli_merge_trees.default([passedThrough, newOutput], { overwrite: true });
+    } else {
+      return newOutput;
+    }
   }
 };
 //# sourceMappingURL=data:application/json;base64,
